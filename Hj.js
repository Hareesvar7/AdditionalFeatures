function generateReport(evalCommand, evalOutput) {
    const reportId = generateReportID();
    const generatedOn = new Date().toISOString();
    
    return `
# OPA Evaluation Report

## Report Information
- **Report ID:** ${reportId}
- **Generated On:** ${generatedOn}
- **Generated By:** Your Name / Your Organization
- **Version:** 1.0

---

## 1. Executive Summary
This section provides a brief overview of the evaluation results and their implications. 

- **Objective:** To evaluate the compliance of the specified resources against established policies.
- **Key Findings:** The evaluated resources are compliant with the specified policies.

---

## 2. Command Executed
**Command:**
\`\`\`bash
${evalCommand}
\`\`\`

---

## 3. Evaluation Output
**Output:**
\`\`\`json
${JSON.stringify(evalOutput, null, 2)}
\`\`\`

---

## 4. Analysis
### 4.1 Overview of Results
The evaluation results indicate the following insights:

- **Overall Compliance:** The evaluated resources are compliant with the specified policies.
- **Exceptions:** There were no exceptions found during the evaluation.

### 4.2 Risk Assessment
Evaluate the potential risks associated with the current configurations:

- **High Risk:** None identified.
- **Medium Risk:** N/A
- **Low Risk:** N/A

---

## 5. Recommendations
Based on the output and analysis, consider the following recommendations:

1. **Policy Review:** Regularly review and update policies to adapt to new compliance requirements.
2. **Monitoring:** Implement ongoing monitoring of the evaluated resources to ensure continued compliance.
3. **Training:** Conduct training sessions for users to ensure they understand the policies.

---

## 6. Additional Notes
- Consider setting up automated alerts for non-compliance incidents.
- Ensure that all stakeholders are informed of policy changes.

---

## 7. Appendices
### Appendix A: Command Details
- **Command Executed:** The specific command used for the evaluation.
- **Execution Time:** Time taken to execute the command.

### Appendix B: References
- [Open Policy Agent Documentation](https://www.openpolicyagent.org/docs/latest/)
- [Your Organizationâ€™s Policy Documentation](link_to_your_policy_documentation)

---

## 8. Audit Log
- **Log Entry 1:** Command executed on ${generatedOn} by User1.
- **Log Entry 2:** Evaluation completed successfully.
    `;
}


const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

function generateReportID() {
    return `RPT-${Date.now()}`;
}

// Save the generated report as a PDF
function saveReport(content) {
    const pdfFilePath = path.join(reportDirectory, 'opa_eval_report.pdf');
    const doc = new PDFDocument();
    const writeStream = fs.createWriteStream(pdfFilePath);

    doc.pipe(writeStream);
    
    // Title
    doc.fontSize(20).text('OPA Evaluation Report', { align: 'center' });
    doc.moveDown();

    // Report Information
    doc.fontSize(12).text(`Report ID: ${generateReportID()}`, { align: 'left' });
    doc.text(`Generated On: ${new Date().toISOString()}`, { align: 'left' });
    doc.moveDown();

    // Command Executed Section
    doc.fontSize(14).text('Command Executed:', { underline: true });
    doc.fontSize(12).text(content.split("**Command Executed:**")[1].split("**Output:**")[0].trim(), { indent: 10 });
    doc.moveDown();

    // Output Section
    doc.fontSize(14).text('Output:', { underline: true });
    doc.fontSize(12).text(content.split("**Output:**")[1].split("**Analysis:**")[0].trim(), { indent: 10 });
    doc.moveDown();

    // Analysis Section
    doc.fontSize(14).text('Analysis:', { underline: true });
    doc.fontSize(12).text('The evaluation results indicate the following insights:', { indent: 10 });
    doc.moveDown();
    doc.text('- [Insert analysis based on evalOutput]', { indent: 20 });
    doc.moveDown();

    // Recommendations Section
    doc.fontSize(14).text('Recommendations:', { underline: true });
    doc.fontSize(12).text('Based on the output and analysis, consider the following recommendations:', { indent: 10 });
    doc.moveDown();
    doc.text('- [Insert recommendations]', { indent: 20 });
    doc.moveDown();

    // Additional Notes Section
    doc.fontSize(14).text('Additional Notes:', { underline: true });
    doc.fontSize(12).text('- [Insert any additional notes or remarks]', { indent: 10 });
    doc.moveDown();

    // Finalize the document
    doc.end();

    writeStream.on('finish', () => {
        vscode.window.showInformationMessage(`Report generated: ${pdfFilePath}`);
    });
}
